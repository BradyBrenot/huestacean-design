@startuml
class ProviderType {
  enum Value

  operator==()
  operator!=()
  toString()
  static ProviderType fromString(String)
}

class Backend << (S, lightblue) >> {
  void serve()

  unique_ptr<Room>[] rooms
  unique_ptr<DeviceProvider>[] deviceProviders
}

class Effect {
  Update(mutable& proxy[])
}

class Room {
  mutex lock

  DeviceInRoom[] devices
  Effect[] effects

  Color[] colors
  Box[] positions
  unique_ptr<DeviceData>[] data

  map<ProviderType, DeviceProviderUpdateParams> updateParams

  String serialize()
  deserialize(String)
}

class DeviceData {

}

Room .. DeviceData

note right of Room
  All access to Room is locked behind one Mutex. 
  Contention will be uncommon. Most of the time
  it's only going to be locked by the update loop.
  Sometimes the GUI will lock it to modify the room,
  which will cause the update loop to potentially
  stall, or vice-versa, but this should be brief.
end note

class DeviceInRoom {
  unique_ptr<Device> device
  Box position
}

class Device {
  String serialize()
  String getName()

  (Box[], unique_ptr<DeviceData>[], ProviderType) GetLightDataForLocation(Box)
  virtual operator==(const otherDevice&)=0
}

note left of Device
  Devices are passed around
  with unique_ptr always.
  They are not shared.
end note

class DeviceFactory {
  unique_ptr<Device> deserialize(String)
}

class DeviceProviderUpdateParams {
  iterator colorsBegin
  iterator colorsEnd
  bool colorsDirty
  
  iterator positionBegin
  iterator positionEnd
  bool positionDirty
  
  iterator dataBegin
  iterator dataEnd
  bool dataDirty
}

note top of DeviceProviderUpdateParams
  This class is here to make it simpler to pass
  data to DeviceProviders for upload. Copy only
  has to be done on the dirtied data.

  The "data" array is arbitrary data that can
  be handled differently by different DeviceProviders,
  with the intention that it be used to help
  identify what device the positions/colors
  belong to for upload reasons.
end note

class DeviceProvider {
  ProviderType type

  Update(DeviceProviderUpdateParams params) = 0
  std::vector< unique_ptr<Device> > getDevices() = 0
}

Room .. DeviceProviderUpdateParams
DeviceProvider .. DeviceProviderUpdateParams

Backend o-- Device
Backend *-- Room
Backend *-- DeviceProvider

Device .. DeviceFactory

DeviceInRoom o-- Device
DeviceProvider o-- Device
Room *-- DeviceInRoom
Room *-- Effect

GUIFrontend .. Backend
HTTPFrontend .. Backend
CLI .. HTTPFrontend

App << (P, #FFBBBB) >>
Foreground << (P, #FFBBBB) >>
BackgroundService << (P, #FFBBBB) >>
GUIProcess << (P, #FFBBBB) >>
CLIProcess << (P, #FFBBBB) >>

GUIProcess *-- GUIFrontend
GUIProcess *-- HTTPFrontend
GUIProcess *-- Backend
CLIProcess *-- Backend
CLIProcess *-- HTTPFrontend

BackgroundService *-- Backend
BackgroundService *-- HTTPFrontend
Foreground *-- GUIFrontend
App *-- BackgroundService
App *-- Foreground

' ==== Hue ====

package Hue {
  class HueDevice
  class HueDeviceProvider
  class HueBridge
  class HueDeviceData
}

class HueDevice {
  String id
  String bridge
}

class HueDeviceData {
  HueDevice device
}

class HueDeviceProvider {
  HueBridge[] bridges

  void Scan()
}

class HueBridge {
  void Link()

  String id
}

HueDeviceProvider *-- HueBridge
DeviceData <|-- HueDeviceData

Device <|-- HueDevice
DeviceProvider <|-- HueDeviceProvider

@enduml
